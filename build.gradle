import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask

buildscript {
    def personalProps = new File(projectDir, 'src/main/resources/application-personal.properties')
    def props = new Properties()
    if (!personalProps.exists()) {
        personalProps.createNewFile()
        personalProps.append("devex.oauth2.client.clientSecret=\n")
        personalProps.append("sdp.v4.security.keystore.password=\n")
        personalProps.append("sdp.v4.security.truststore.password=\n")
        personalProps.append("sdp.v4.security.clientSecret=\n")
        personalProps.append("sdp.v4.security.env=IT\n")
    } else {
        personalProps.withInputStream {props.load(it)}
    }

    ext {
        springCloudVersion = '2023.0.2'
        jacksonVersion = '2.15.3'
        springBootVersion = '3.2.5'
        capitaloneMavenRepoCLM = 'https://artifactory.cloud.capitalone.com/artifactory/maven-internalfacing'
        coverageExclusions = '**/configuration/*.java,**/configuration/**/*.java,**/model/*.java,**/logging/*.java,**/repository/*.java,**/SdpConsumerApplication.java'
    }
    repositories {
        maven { url "${capitaloneMavenRepoCLM}" }
    }
    dependencies {
        classpath("com.github.davidmc24.gradle.plugin.avro-base:com.github.davidmc24.gradle.plugin.avro-base.gradle.plugin:1.3.0")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8")
        classpath("org.sonarsource.sonar-runner:sonar-runner-api:2.5.1")
        classpath("io.spring.gradle:dependency-management-plugin:1.1.4")
        classpath("org.jacoco:org.jacoco.ant:0.8.10")
    }
}
plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.github.davidmc24.gradle.plugin.avro-base' version '1.3.0'
}

apply from: 'gradle/sonar.gradle'

group = 'com.capitalone.api.scheduler'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    maven {
        url "${capitaloneMavenRepoCLM}"
    }
}

springBoot {
    buildInfo()
}
bootJar {
    enabled = true
    archiveClassifier.set("")
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}
jar{
    enabled = false
}
def generateAvro = tasks.register("generateAvro", GenerateAvroJavaTask) {
    source("src/main/resources/avro/")
    outputDir = file("src/main/java-gen/")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.apache.avro:avro:1.11.3'
    implementation 'org.apache.commons:commons-compress:1.26.1'
    implementation 'com.google.guava:guava:33.1.0-jre'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.apache.kafka:kafka-clients:3.7.0'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    implementation ('com.capitalone.sdp:stream-poc-common_2.12:202309294915-bdf080d'
    ){
        exclude group:'commons-logging', module:'commons-logging'
    }
    implementation ('com.capitalone.sdp:stream-poc-sink-kafka-deserializer_2.12:202309294915-bdf080d'){
        exclude group:'commons-logging', module:'commons-logging'
    }
    implementation('com.capitalone.moneymovement:encrypted-sleeve:5.0.2')
    implementation('org.springframework.cloud:spring-cloud-starter-openfeign')
    implementation('io.github.openfeign:feign-core:12.3')
    implementation('io.github.openfeign:feign-gson')
    implementation("org.springframework.security:spring-security-core")
    implementation("org.springframework.security:spring-security-config")
    implementation("org.springframework.security:spring-security-oauth2-client"){
        exclude group: 'com.nimbusds', module: 'nimbus-jose-jwtr'
    }
    implementation('com.nimbusds:nimbus-jose-jwt:9.37.2')
    implementation("org.springframework.security:spring-security-web")
    implementation("com.capitalone.chassis.starters:chassis-spring-boot-starter-business-model:5.0.4"){
        exclude module: 'chassis-spring-boot-starter-log4j2-logger'
    }
    implementation('com.google.guava:guava:33.2.1-jre')




    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.11.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

bootRun {
    systemProperties System.properties
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    jacoco {
        excludes = ["${coverageExclusions}"]
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/configuration/*',
                              '**/repository/*',
                              '**/logging/*',
                              '**/model/*',
                              '**/response/*',
                              '**/requests/*',
                              '**/constants/*',
                              '**/exception/*',
                              '**/feign/*',
                              '**/codec/*',
                              '**/service/*',
                              '**/SdpConsumerApplication*'])
        })
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

